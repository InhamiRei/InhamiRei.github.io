(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{281:function(t,n,s){"use strict";s.r(n);var a=s(12),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"生命周期图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期图解"}},[t._v("#")]),t._v(" 生命周期图解")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("四大阶段")]),t._v("：")])]),t._v(" "),s("ol",[s("li",[t._v("Initialization：初始化阶段")]),t._v(" "),s("li",[t._v("Mounting：挂载阶段")]),t._v(" "),s("li",[t._v("Updation：更新阶段")]),t._v(" "),s("li",[t._v("Unmounting：销毁阶段")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t.$withBase("/img/react/生命周期_1.jpg"),alt:"生命周期_1.jpg"}})]),t._v(" "),s("h2",{attrs:{id:"生命周期解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期解释"}},[t._v("#")]),t._v(" 生命周期解释")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("生命周期函数指在某一个时刻组件会自动调用执行的函数")])]),t._v(" "),s("li",[t._v("render()函数，就是一个生命周期函数，它在 state 发生改变时自动执行。这就是一个标准的自动执行函数")]),t._v(" "),s("li",[t._v("constructor 不算生命周期函数，算是构造函数，它是 ES6 的基本语法，虽然它和生命周期函数的性质一样，但不能认为是生命周期函数")]),t._v(" "),s("li",[t._v("可以把它当成一个生命周期函数，看成 React 的 Initialization 阶段，定义属性（props）和状态(state)")])]),t._v(" "),s("h2",{attrs:{id:"mounting-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mounting-阶段"}},[t._v("#")]),t._v(" Mounting 阶段")]),t._v(" "),s("ul",[s("li",[t._v("Mounting 阶段叫挂载阶段，伴随着整个虚拟 DOM 的生成，它里边有三个小的生命周期函数，分别是：")])]),t._v(" "),s("ol",[s("li",[t._v("componentWillMount : 在组件即将被挂载到页面的时刻执行")]),t._v(" "),s("li",[t._v("render : 页面 state 或 props 发生变化时执行")]),t._v(" "),s("li",[t._v("componentDidMount : 组件挂载完成时被执行")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("componentWillMount 和 componentDidMount 这两个生命周期函数，只在页面刷新时执行一次，而 render 函数是只要有 state 和 props 变化就会执行")])])]),t._v(" "),s("h2",{attrs:{id:"updation-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updation-阶段"}},[t._v("#")]),t._v(" Updation 阶段")]),t._v(" "),s("h3",{attrs:{id:"shouldcomponentupdate-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate-函数"}},[t._v("#")]),t._v(" shouldComponentUpdate 函数")]),t._v(" "),s("ul",[s("li",[t._v("shouldComponentUpdate 函数会在组件更新之前，自动被执行")]),t._v(" "),s("li",[t._v("现在就可以在控制台 console 里看到结果了，并且结果是每次文本框发生改变时都会随着改变。如果你返回了 false，这组件就不会进行更新了。 简单点说，就是返回 true，就同意组件更新;返回 false,就反对组件更新")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shouldComponentUpdate---组件发生改变前执行'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"componentwillupdate-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentwillupdate-函数"}},[t._v("#")]),t._v(" componentWillUpdate 函数")]),t._v(" "),s("ul",[s("li",[t._v("componentWillUpdate 在组件更新之前，在 shouldComponenUpdate 之后被执行。但是如果 shouldComponentUpdate 返回 false，这个函数就不会被执行了")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//shouldComponentUpdate返回true才会被执行。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'componentWillUpdate---组件更新前，shouldComponentUpdate函数之后执行'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"componentdidupdate-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate-函数"}},[t._v("#")]),t._v(" componentDidUpdate 函数")]),t._v(" "),s("ul",[s("li",[t._v("componentDidUpdate 在组件更新之后执行，它是组件更新的最后一个环节")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'componentDidUpdate----组件更新之后执行'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"componentwillreceiveprops-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentwillreceiveprops-函数"}},[t._v("#")]),t._v(" componentWillReceiveProps 函数")]),t._v(" "),s("ul",[s("li",[t._v("如果组件是顶层组件的话是不会执行的，因为他并没有接收任何的 props")]),t._v(" "),s("li",[t._v("子组件接收到父组件传递过来的参数，父组件 render 函数重新被执行，这个生命周期就会被执行")]),t._v(" "),s("li",[t._v("也就是说这个组件第一次存在于 Dom 中，函数是不会被执行的")]),t._v(" "),s("li",[t._v("如果已经存在于 Dom 中，函数才会被执行")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillReceiveProps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child - componentWillReceiveProps'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"unmounting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unmounting"}},[t._v("#")]),t._v(" Unmounting")]),t._v(" "),s("h3",{attrs:{id:"componentwillunmount-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentwillunmount-函数"}},[t._v("#")]),t._v(" componentWillUnmount 函数")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当组件从页面中删除的时候执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child - componentWillUnmount'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);